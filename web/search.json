[
  {
    "objectID": "methodology.html",
    "href": "methodology.html",
    "title": "",
    "section": "",
    "text": "graph LR\n    l0:\n    A[Square Rect] -- Link text --&gt; B((Circle))\n    A --&gt; C(Round Rect)\n    B --&gt; D{Rhombus}\n    C --&gt; D"
  },
  {
    "objectID": "methodology.html#methodology",
    "href": "methodology.html#methodology",
    "title": "",
    "section": "",
    "text": "graph LR\n    l0:\n    A[Square Rect] -- Link text --&gt; B((Circle))\n    A --&gt; C(Round Rect)\n    B --&gt; D{Rhombus}\n    C --&gt; D"
  },
  {
    "objectID": "experiments.html",
    "href": "experiments.html",
    "title": "",
    "section": "",
    "text": "graph LR\n    img([1,28,28]) --- conv\n    conv --- a1\n    a1([3,25,25]) --- max-pool\n    max-pool -- _/ --- a2\n    a2([3,24,24]) --- ravel\n    ravel --- a3\n    a3([1728]) --- a( )\n\n\n\n\n\n\n\n\n\n\n\ngraph LR\n    a( ) --- linear-1\n    linear-1 -- σ --- a4\n    a4([512]) --- linear-2\n    linear-2 -- _/ --- a5\n    a5([64]) --- linear-3\n    linear-3 -- eˣ/Σeˣ --- a6([10])\n\n\n\n\n\n\n\n\n\n\nread the TinyImageNet paper\nin what ways do models perform worse on TinyImageNet?\n\n\n\nTinyImageNet is a scaled-down version of the much larger ImageNet dataset, both of which are pivotal in the field of computer vision for training machine learning models, particularly in image classification tasks. Here’s a comparison based on their characteristics and use cases:\nSize and Complexity:\nImageNet: It’s one of the largest datasets available for image classification, containing over 14 million hand-annotated images divided into approximately 22,000 categories. The images in ImageNet are of various sizes and high resolution. TinyImageNet: It significantly reduces the scale, containing 100,000 images across 200 classes, with each image resized to a small dimension of 64x64 pixels. Computational Requirements:\nImageNet requires considerable computational resources for training due to its size and the complexity of its images. Training models on ImageNet often requires GPUs or even clusters of GPUs to complete in a reasonable amount of time. TinyImageNet, with its reduced size and complexity, requires significantly less computational power, making it more accessible for researchers with limited resources, for educational purposes, and for rapid prototyping. Use Cases:\nImageNet is used in cutting-edge research for developing state-of-the-art machine learning models in image recognition, capable of understanding intricate and nuanced distinctions between thousands of categories. TinyImageNet is often used for educational purposes, allowing students and researchers to experiment with neural network architectures without the need for extensive computational resources. It serves as a testbed for algorithm development and for those new to the field of machine learning. Performance Benchmarking:\nImageNet is the benchmark for many competitions and research works in computer vision, where the accuracy of models on this dataset is a key indicator of their performance and sophistication. TinyImageNet, while not as widely used as a benchmark in high-profile competitions, offers a simpler benchmarking tool for evaluating the performance of lightweight or less complex models. Accessibility:\nImageNet’s large size makes it more challenging to download, store, and process. TinyImageNet, being much smaller, is easier to download and work with, especially for individuals and organizations with limited storage and computing power. In summary, while ImageNet remains the gold standard for training and benchmarking advanced image classification models, TinyImageNet provides a practical alternative for situations requiring lower computational costs, educational purposes, and initial experiments in model development. The choice between the two largely depends on the specific needs, resources, and goals of the project or learning endeavor.\nModels trained on TinyImageNet, due to the dataset’s reduced scale and complexity compared to ImageNet, may exhibit certain limitations in capabilities:\nGeneralization to High-Resolution Images: TinyImageNet images are of low resolution (64x64 pixels), which means models trained on this dataset might struggle with high-resolution images found in real-world applications. ImageNet models, trained on a diverse set of high-resolution images, are better at handling and recognizing details in such images.\nDetailed Feature Recognition: The lower resolution and simplified dataset mean that models trained on TinyImageNet might not learn to recognize as detailed features as those trained on ImageNet. The intricate textures, patterns, and object details present in ImageNet’s high-resolution images facilitate deeper feature extraction capabilities in models.\nCategory Breadth and Depth: ImageNet encompasses over 22,000 categories, offering a far more extensive range of objects, scenes, and concepts for models to learn from, compared to TinyImageNet’s 200 classes. This broad exposure helps ImageNet-trained models to classify a wider variety of images accurately and with more nuanced understanding.\nRobustness and Adaptability: Training on a larger and more complex dataset like ImageNet exposes models to a wider range of lighting conditions, angles, backgrounds, and occlusions, making them more robust and adaptable to different real-world conditions. TinyImageNet-trained models might not exhibit the same level of robustness due to the dataset’s limitations.\nFine-Grained Classification: The extensive number of categories in ImageNet, including many subcategories for animals, objects, and scenes, allows for fine-grained classification. Models trained on ImageNet can distinguish between closely related categories (e.g., different dog breeds). TinyImageNet’s limited category set provides less opportunity for learning such fine distinctions.\nTransfer Learning and Feature Extraction: While models trained on both datasets can be used for transfer learning, ImageNet models are often more effective as feature extractors for other tasks beyond image classification. The depth and breadth of learned features make ImageNet-trained models more versatile when applied to other domains or tasks.\nReal-World Application Performance: Given the aforementioned points, models trained on ImageNet are generally more prepared for direct application to real-world problems, which often involve complex scenes and high-resolution images. Models trained on TinyImageNet may require additional fine-tuning or may only be suitable for applications where the image conditions closely match those of the TinyImageNet dataset.\nIn summary, while TinyImageNet offers a valuable resource for education, experimentation, and research where computational resources are limited, the capabilities of models trained on this dataset are constrained compared to those trained on ImageNet. These constraints primarily involve generalization, detail recognition, category coverage, and real-world application readiness.",
    "crumbs": [
      "Experiments"
    ]
  },
  {
    "objectID": "experiments.html#experiments",
    "href": "experiments.html#experiments",
    "title": "",
    "section": "",
    "text": "graph LR\n    img([1,28,28]) --- conv\n    conv --- a1\n    a1([3,25,25]) --- max-pool\n    max-pool -- _/ --- a2\n    a2([3,24,24]) --- ravel\n    ravel --- a3\n    a3([1728]) --- a( )\n\n\n\n\n\n\n\n\n\n\n\ngraph LR\n    a( ) --- linear-1\n    linear-1 -- σ --- a4\n    a4([512]) --- linear-2\n    linear-2 -- _/ --- a5\n    a5([64]) --- linear-3\n    linear-3 -- eˣ/Σeˣ --- a6([10])\n\n\n\n\n\n\n\n\n\n\nread the TinyImageNet paper\nin what ways do models perform worse on TinyImageNet?\n\n\n\nTinyImageNet is a scaled-down version of the much larger ImageNet dataset, both of which are pivotal in the field of computer vision for training machine learning models, particularly in image classification tasks. Here’s a comparison based on their characteristics and use cases:\nSize and Complexity:\nImageNet: It’s one of the largest datasets available for image classification, containing over 14 million hand-annotated images divided into approximately 22,000 categories. The images in ImageNet are of various sizes and high resolution. TinyImageNet: It significantly reduces the scale, containing 100,000 images across 200 classes, with each image resized to a small dimension of 64x64 pixels. Computational Requirements:\nImageNet requires considerable computational resources for training due to its size and the complexity of its images. Training models on ImageNet often requires GPUs or even clusters of GPUs to complete in a reasonable amount of time. TinyImageNet, with its reduced size and complexity, requires significantly less computational power, making it more accessible for researchers with limited resources, for educational purposes, and for rapid prototyping. Use Cases:\nImageNet is used in cutting-edge research for developing state-of-the-art machine learning models in image recognition, capable of understanding intricate and nuanced distinctions between thousands of categories. TinyImageNet is often used for educational purposes, allowing students and researchers to experiment with neural network architectures without the need for extensive computational resources. It serves as a testbed for algorithm development and for those new to the field of machine learning. Performance Benchmarking:\nImageNet is the benchmark for many competitions and research works in computer vision, where the accuracy of models on this dataset is a key indicator of their performance and sophistication. TinyImageNet, while not as widely used as a benchmark in high-profile competitions, offers a simpler benchmarking tool for evaluating the performance of lightweight or less complex models. Accessibility:\nImageNet’s large size makes it more challenging to download, store, and process. TinyImageNet, being much smaller, is easier to download and work with, especially for individuals and organizations with limited storage and computing power. In summary, while ImageNet remains the gold standard for training and benchmarking advanced image classification models, TinyImageNet provides a practical alternative for situations requiring lower computational costs, educational purposes, and initial experiments in model development. The choice between the two largely depends on the specific needs, resources, and goals of the project or learning endeavor.\nModels trained on TinyImageNet, due to the dataset’s reduced scale and complexity compared to ImageNet, may exhibit certain limitations in capabilities:\nGeneralization to High-Resolution Images: TinyImageNet images are of low resolution (64x64 pixels), which means models trained on this dataset might struggle with high-resolution images found in real-world applications. ImageNet models, trained on a diverse set of high-resolution images, are better at handling and recognizing details in such images.\nDetailed Feature Recognition: The lower resolution and simplified dataset mean that models trained on TinyImageNet might not learn to recognize as detailed features as those trained on ImageNet. The intricate textures, patterns, and object details present in ImageNet’s high-resolution images facilitate deeper feature extraction capabilities in models.\nCategory Breadth and Depth: ImageNet encompasses over 22,000 categories, offering a far more extensive range of objects, scenes, and concepts for models to learn from, compared to TinyImageNet’s 200 classes. This broad exposure helps ImageNet-trained models to classify a wider variety of images accurately and with more nuanced understanding.\nRobustness and Adaptability: Training on a larger and more complex dataset like ImageNet exposes models to a wider range of lighting conditions, angles, backgrounds, and occlusions, making them more robust and adaptable to different real-world conditions. TinyImageNet-trained models might not exhibit the same level of robustness due to the dataset’s limitations.\nFine-Grained Classification: The extensive number of categories in ImageNet, including many subcategories for animals, objects, and scenes, allows for fine-grained classification. Models trained on ImageNet can distinguish between closely related categories (e.g., different dog breeds). TinyImageNet’s limited category set provides less opportunity for learning such fine distinctions.\nTransfer Learning and Feature Extraction: While models trained on both datasets can be used for transfer learning, ImageNet models are often more effective as feature extractors for other tasks beyond image classification. The depth and breadth of learned features make ImageNet-trained models more versatile when applied to other domains or tasks.\nReal-World Application Performance: Given the aforementioned points, models trained on ImageNet are generally more prepared for direct application to real-world problems, which often involve complex scenes and high-resolution images. Models trained on TinyImageNet may require additional fine-tuning or may only be suitable for applications where the image conditions closely match those of the TinyImageNet dataset.\nIn summary, while TinyImageNet offers a valuable resource for education, experimentation, and research where computational resources are limited, the capabilities of models trained on this dataset are constrained compared to those trained on ImageNet. These constraints primarily involve generalization, detail recognition, category coverage, and real-world application readiness.",
    "crumbs": [
      "Experiments"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "Results",
    "section": "",
    "text": "Results"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction"
  },
  {
    "objectID": "qna.html",
    "href": "qna.html",
    "title": "Q&A",
    "section": "",
    "text": "Q&A\n\n\n\nI did a thing\n\nWhat did you do?\n\nWell, I did two things, but they come down to applying the same technique twice.\n\nOkay, what’s the technique?\n\nIt’s called “feature-conditional generation” or something like it, the github is called “features2image_diffusion”. It comes down to using a traditional conditional diffusion model with some other network’s activations instead of text embeddings of input text.\n\nwow okay uh, what does that mean?\n\nUh, try a different question like “for what purpose”?\n\nsure, for what purpose?\n\nInterpreting a network’s activations. The diffusion model generates data points that look like the original dataset. If you condition it on the activations, you can see what kind of data the model generates if some activation is exaggerated.\n\nuhh\n\nSee the diagram next to this text.\n\nuhh\n\nSo, we have a CNN on the right which is our target for understanding.\n\n“target for understandig”?\n\nThat which we want to understand.\n\ngo on\n\nThere are various facets we can try to comprehend about the CNN. I choose to further understanding about the activations of the model.\n\nwhy the activations?\n\nThere isn’t really a correct answer to this. At the end, we need to understand everything: the weights, the architecture, the role of the nonlinearities and the semantics of the activations. I choose the activations since, intuitively, those seem to contain information we might recognise better.\n\nWhy would we recognise information in activations better than in other parts like the weights?\n\nThe activations depend on the specific data point that we feed into the CNN. This specific data point is recognisable to us, so that is a nice anchor point on which we can build further understandings.\nWeights on the other hand, are constructed during the entire training run and therefore depend on every data point in the set. For us to understand those, we need to find a different point to anchor on, one might anchor on algorithms we might expect the network to implement for example. But those anchors are far less clear and since I believe that nobody has yet succeeded in consistently making good guesses about what kind of algorithms networks implement, we currently don’t know what kind anchors are useful for building our understanding upon.\n\nWith “anchor”, do you mean some concrete thing we can reference back to when explaining some part of the CNN?\n\nYes, I explain the activations of the CNN by showing permutations of the original data point that caused those activations. So the data point is the anchor.\nI also explain the activations in terms of the prediction the CNN makes, that’s a second anchor.\n\nAlright, so you were explaining the diagram that showcases what you did.\n\nSo, on the right we have the CNN that we want to understand. In the diagram, I often also show the activations that flow between layers, anything in dotted lines are activations, anything not dotted are layers.\nYou can see that I copy the activations before the last layer of the CNN (since 2 lines flow out of it) and one of the copies goes into the sparse autoencoder (SAE).\n\nWhat is that SAE doing there?\n\nAnthropic claims that the elements of activations can be made less polysemantic when you encode them with a SAE.\n\nWhat is polysemanticity and why would we care?\n\nPolysemanticity is the property of an activation to encode multiple meanings in the same place.\nNeural networks need to deal with a lot of features, that is, properties of the data point that are relevant to keep track of for the task that the network optimizes for.\nBut, only a small subset of all features in the data set, are present in a single data point. Having a neuron per feature would be inefficient and the network is better off with having the same neurons do suit different purposes in different contexts.\nA famous example is the fact that one later layer in the GoogLeNet vision model has a neuron that fires on cat faces and car doors, so that is 2 features in a single neuron. The explanation is that the rest of the network has little trouble differentiating cats from cars, so this neuron is allowed to be confused between the two.\nTo elaborate on this, when the rest of the network is uncertain about whether the image is a cat or a dog, this neuron helps by firing when there is a cat face. When the network is uncertain about whether there is a house or a car, it fires on car doors.\nThe instance where the network is uncertain about whether the image is a cat or a car is so rare (since earlier neurons already successfully differentiate the two), that this particular neuron does not have to know the difference. It would only be wasteful to 1 neuron per feature in that layer.\n\nOkay, so you convert the activation into its features.\n\nYes, I should mention that this is an optional step though.\n\nHow so?\n\nWell, the success of the SAE is not thoroughly tested yet. Plausibly it decomposes activations into their features, but there is no guarantee that those features are then more interpretable.\nWe can also not encode the activations, and work with that. I’ll keep calling these copied activations that may or may not have been encoded “features” though.\n\nOkay, so what are you then doing with these features? You seem to feed them into the “UNET” at some halfway point.\n\nYes, the U-NET is the network used for diffusion, where diffusion is that process famous for generating images.\nWhen training a diffusion model, we sample an image from a data set, add noise to it and feed it into the U-NET. The task of the U-NET then, is to predict what part of its input is noise, and what part is image.\nWe call it “noise prediction” since the U-NET needs to output the noise.\n\nHow does noise prediction lead to image generation?\n\nNow, what we can do with a trained U-NET, is to pass complete noise into it, and it then predicts which part of that was noise. It will not output the exact same image, since during it’s training it’s used to receiving input that is part image, part noise. So it outputs noise that is similar, but not completely identical to the input.\nWe subtract this noise then from the input and feed it into the U-NET again. And we repeat this process for 400 steps.\n\nSo, at the 400th step, the input looks like an image from the dataset?\n\nExactly, now that is normal diffusion. What you are more familiar with is conditional diffusion. With conditional diffusion, we feed some information about the image into the U-NET at some midway point.\nThe most-used applications of diffusion (Stable Diffusion, DALL-E, Midjourney) do this with text. During training, they take an image and its caption, they tokenize and embed the caption into some array and then multiply this array with the activations of the U-NET at some midway point in the U-NET, while the U-NET is looking at some noisy version of the image.\nThe U-NET uses this new information, since this information tells the U-NET what kind of image it should generate: not just any image from the training set, but the specific image that would have this caption.\n\nOkay, so instead of feeding it text embeddings, you feed it the CNN’s features?\n\nYes. The image that the CNN got, is copied and made noisy, so the U-NET is looking at a noisy version of the same image. Then, at the midpoint, the U-NET receives the activations from the CNN, so it can further steer its generation based on the information the CNN’s features provide.\n\nOoo-kay, so now you have diffusion model that can generate images based on the CNN’s features.\n\nWhen we feed the CNN some image and get those features, and then have the diffusion model generate an image while conditioning it on those features, the diffusion model generates an image that is very close to the image that the CNN got. So, this part works.\n\nHow does this help with interpreting the CNN?\n\nThe U-NET, now has some understanding of the CNN’s features.\n\nOkay\n\nSo what we can do now, is edit those features and see what kind of image the diffusion model generates.\nThen, by doing various edits on various parts of the features, we might learn what purposes individual features suit."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Experiments\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethodology\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQ&A\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResults\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]